#version 450
layout(local_size_x = 1) in;

#define SCALE 0.01

struct Vertex {
    float x; float y; float z;
    float nx; float ny; float nz;
    float tx; float ty; float tz;
    float bx; float by; float bz;
};

layout(std430, set=0, binding=0) buffer Src {
    Vertex src_vertices[];
};
layout(std430, set=0, binding=1) buffer Dst {
    Vertex dst_vertices[];
};
layout(set=1, binding=0) uniform ComputeData {
    vec2 u_position;
};

vec3 permute(vec3 x) {
    return mod(((x * 34.0) + 1.0) * x, 289.0);
}


float snoise(vec2 xz) {
    vec2 v = xz * SCALE;
    const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    vec2 i = floor(v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);
    vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod(i, 289.0);
    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));
    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy),
    dot(x12.zw, x12.zw)), 0.0);
    m = m * m;
    m = m * m;
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
    vec3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g) * 15.0;
}


void main() {
    uint i = gl_GlobalInvocationID.x;
    Vertex v = src_vertices[i];
    v.x = u_position.x + v.x;
    v.z = u_position.y + v.z;
    v.y = snoise(vec2(v.x, v.z));

    vec3 normal = normalize(vec3(
        snoise(vec2((v.x - 1.0), v.z)) - snoise(vec2((v.x + 1.0), v.z)),
        2.0,
        snoise(vec2(v.x, (v.z - 1.0))) - snoise(vec2(v.x, (v.z + 1.0)))
    ));
    vec3 bitangent = normalize(cross(vec3(0.0, 0.0, 1.0), normal));
    vec3 tangent = normalize(cross(normal, bitangent));

    v.nx = normal.x; v.ny = normal.y; v.nz = normal.z;
    v.tx = tangent.x; v.ty = tangent.y; v.tz = tangent.z;
    v.bx = bitangent.x; v.by = bitangent.y; v.bz = bitangent.z;
    dst_vertices[i] = v;
}