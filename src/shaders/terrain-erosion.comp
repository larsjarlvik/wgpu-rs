#version 450
#include "include/compute.glsl"

#define MAX_ITERATIONS 100
#define DEPOSITION_RATE 0.06
#define EROSION_RATE 0.08
#define SPEED 0.15
#define FRICTION 0.7
#define ITERATION_SCALE 0.04
#define RADIUS 0.8
#define RESOLUTION 0.1
#define SCALE 4.0

float sample_height(vec2 pos) {
    vec2 s = pos * SCALE;
    vec2 n = floor(s);
    vec2 f = s - n;

    float ylu = imageLoad(elevation_normal_texture, ivec2(n)).x;
    float yld = imageLoad(elevation_normal_texture, ivec2(n.x, n.y + 1.0)).x;
    float yru = imageLoad(elevation_normal_texture, ivec2(n.x + 1.0, n.y)).x;
    float yrd = imageLoad(elevation_normal_texture, ivec2(n.x + 1.0, n.y + 1.0)).x;
    float yl = ylu + (yld - ylu) * f.y;
    float yr = yru + (yrd - yru) * f.y;

    return yl + (yr - yl) * f.x;
}

vec3 sample_normal(vec2 pos) {
    float double_radius = -(RESOLUTION + RESOLUTION);
    float left = sample_height(vec2(pos.x - RESOLUTION, pos.y));
    float top = sample_height(vec2(pos.x, pos.y - RESOLUTION));
    float right = sample_height(vec2(pos.x + RESOLUTION, pos.y));
    float bottom = sample_height(vec2(pos.x, pos.y + RESOLUTION));

    vec3 normal = vec3(
        double_radius * (right - left),
        double_radius * double_radius,
        double_radius * (bottom - top)
    );

    return normalize(normal);
}

void update_val(vec2 pos, float val) {
    vec4 current_elev = imageLoad(elevation_normal_texture, ivec2(pos));
    vec4 current_biome = imageLoad(biome_texture, ivec2(pos));
    current_elev.x += val;
    current_biome.z -= val * 0.5;
    imageStore(elevation_normal_texture, ivec2(pos), current_elev);
    imageStore(biome_texture, ivec2(pos), current_biome);
}

void change(vec2 pos, float delta) {
    vec2 s = pos * SCALE;
    vec2 n = floor(s);
    vec2 f = s - n;

    update_val(vec2(n.x, n.y), f.x * f.y * delta);
    update_val(vec2(n.x + 1.0, n.y), (1.0 - f.x) * f.y * delta);
    update_val(vec2(n.x, n.y + 1.0), f.x * (1.0 - f.y) * delta);
    update_val(vec2(n.x + 1.0, n.y + 1.0), (1.0 - f.x) * (1.0 - f.y) * delta);
}

void main() {
    uint execution_count = gl_GlobalInvocationID.y * u_size + gl_GlobalInvocationID.x;
    if (execution_count % u_stage_count != u_current_stage) {
        return;
    }

    vec2 xz = vec2(gl_GlobalInvocationID);
    vec2 pos = vec2(xz.x + (random(xz) * 15.0), xz.y + (random(xz) * 15.0));

    vec2 o = vec2(
        (random(vec2(xz.x, xz.y)) * 2.0 - 1.0) * RADIUS * RESOLUTION,
        (random(vec2(xz.y, xz.x)) * 2.0 - 1.0) * RADIUS * RESOLUTION
    );

    float sediment = 0.0;
    vec2 x = pos;
    vec2 p = x.xy;
    vec2 v = vec2(0.0);
    for (int i = 0; i < MAX_ITERATIONS; i++) {
        vec3 surface_normal = sample_normal(pos + o);
        if (surface_normal.y == 1.0) break;

        float deposit = sediment * DEPOSITION_RATE * surface_normal.y;
        float erosion = EROSION_RATE * (1.0 - surface_normal.y) * min(1.0, float(i) * ITERATION_SCALE);

        change(p, deposit - erosion);

        v = FRICTION * v + surface_normal.xz * SPEED * RESOLUTION;
        p = x;
        x += v;

        sediment += erosion - deposit;
    }
}
