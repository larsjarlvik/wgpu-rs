#version 450

#define NOISE_SET 2
#include "include/noise.glsl"

layout(local_size_x = 16, local_size_y = 1) in;

struct Vertex {
    float x; float y; float z;
    float nx; float ny; float nz;
};

layout(std430, set=0, binding=0) buffer Src {
    Vertex comp_vertices[];
};
layout(set=1, binding=0) uniform ComputeData {
    float u_sea_level;
    float u_horizontal_scale;
    float u_vertical_scale;
    uint u_size;
    uint u_octaves;
};

float read_elevation(uint i, vec2 offset) {
    Vertex v = comp_vertices[i];
    float half_size = float(u_size) / 2.0;
    uint rx = uint(v.x + half_size + offset.x);
    uint rz = uint(v.z + half_size + offset.y);

    if (rx < 0 || rx >= u_size ||
        rz < 0 || rz >= u_size) {
        return get_elevation(vec2(v.x + offset.x, v.z + offset.y), u_sea_level, u_horizontal_scale, u_vertical_scale, u_octaves);
    }

    return comp_vertices[rz * u_size + rx].y;
}

void main() {
    uint i = gl_GlobalInvocationID.x;

    vec3 norm = normalize(vec3(
        read_elevation(i, vec2(-1.0, 0.0)) - read_elevation(i, vec2(1.0, 0.0)),
        2.0,
        read_elevation(i, vec2(0.0, -1.0)) - read_elevation(i, vec2(0.0, 1.0))
    ));

    comp_vertices[i].nx = norm.x;
    comp_vertices[i].ny = norm.y;
    comp_vertices[i].nz = norm.z;
}
